import { directive } from 'lit-html';
import { BaseScheduler } from './scheduler';
const includes = Array.prototype.includes;
function makeVirtual() {
    const partToScheduler = new WeakMap();
    const schedulerToPart = new WeakMap();
    class Scheduler extends BaseScheduler {
        constructor(renderer, part) {
            super(renderer, part);
            this.state.virtual = true;
        }
        render() {
            return this.state.run(() => this.renderer.apply(this.host, this.args));
        }
        commit(result) {
            this.host.setValue(result);
            this.host.commit();
        }
        teardown() {
            super.teardown();
            let part = schedulerToPart.get(this);
            partToScheduler.delete(part);
        }
    }
    function virtual(renderer) {
        function factory(...args) {
            return (part) => {
                let cont = partToScheduler.get(part);
                if (!cont) {
                    cont = new Scheduler(renderer, part);
                    partToScheduler.set(part, cont);
                    schedulerToPart.set(cont, part);
                    teardownOnRemove(cont, part);
                }
                cont.args = args;
                cont.update();
            };
        }
        return directive(factory);
    }
    return virtual;
}
function teardownOnRemove(cont, part, node = part.startNode) {
    let frag = node.parentNode;
    let mo = new MutationObserver(mutations => {
        for (let mutation of mutations) {
            if (includes.call(mutation.removedNodes, node)) {
                mo.disconnect();
                if (node.parentNode instanceof ShadowRoot) {
                    teardownOnRemove(cont, part);
                }
                else {
                    cont.teardown();
                }
                break;
            }
            else if (includes.call(mutation.addedNodes, node.nextSibling)) {
                mo.disconnect();
                teardownOnRemove(cont, part, node.nextSibling || undefined);
                break;
            }
        }
    });
    mo.observe(frag, { childList: true });
}
export { makeVirtual };
